(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["BipedalLocomotion`CurvedFeet`", {"GlobalVariables`", "RigidBodyDynamics`", "BipedalLocomotion`", "BipedalLocomotion`Model`", "HybridDynamics`"}]

CurvedFeet::usage = "";
CurvedFeetP::usage = "";
CurvedFeetSurface::usage = "";

CurvedFeetMeshOptions::usage = "";

Begin["`Private`"]


(* ::Input::Initialization:: *)
(* parameters *)
L = 0.5;
R = 0.41 L;
Lcom = 0.355 L;

w0 = 0.002L;
w = w0 \[DoubleStruckC][-3];
rGyr = 0.348 L;
m = 1.75;
g = {0, 9.81, 0};

(* points of interest/curved foot *)
limb = {0, -L, 0};
center = {w, 0, 0} + limb; (* center of curved foot in leg frame *)

lLimb = {"left leg", limb};
rLimb = {"right leg", limb};
limbs = {lLimb, rLimb};

left = {"left leg", center};
right = {"right leg", center};
feet = {left, right};

(* # of control/design parameters *)
n\[Mu] = 2;


(* ::Input::Initialization:: *)
(* pre-impact stance x[0-]/c- *)
stsw[s_, f_:{"left", "right"}] := If[StringMatchQ[s, "left", IgnoreCase->True], f, Reverse@f];


(* ::Input::Initialization:: *)
regopt[s_] := Module[{S, P, px, py},
S = stsw[s, feet];

(* rolling without slipping *)
px = {0, 0, R Cos[\[DoubleStruckC][-2]], 1, 0, 0};
py = {0, 0, R Sin[\[DoubleStruckC][-2]], 0, 1, 0};

P = BLFeet[First@S, {4, 5}][1] /. {4 -> px, 5 -> py};
{"P" -> <|0 -> P|>, "S" -> S, "n\[Mu]" -> n\[Mu]}
];


(* ::Input::Initialization:: *)
fixcons[] := Module[{C},
(* don't expand certain constraints *)
C = {_, _, ((\[DoubleStruckB]')|\[DoubleStruckB])[__], __};
C = Flatten@Position[RigidBodyDynamics`Private`con, C];
RigidBodyDynamics`Private`con[[C, -2]] = False;

(* don't apply Kp gain *)
RigidBodyDynamics`Private`con[[All, -4]] = 0;

(* update con fcns & data *)
RBDSpatialFunctions[];
]


(* ::Input::Initialization:: *)
contactAngles[c_] := Module[{q5, w, \[Theta], \[Theta]1, \[Theta]2, a1, a2},
q5 = c[[5]];
w = w0 c[[-3]];

a1 = Sqrt[L^2+ w^2];
a2 = -a1;
\[Theta]2 = ArcTan[w, L];
\[Theta]1 = -q5 + \[Theta]2;
\[Theta] = ArcTan[a1 Cos[\[Theta]1]+a2 Cos[\[Theta]2], a1 Sin[\[Theta]1]+a2 Sin[\[Theta]2]];
Which[\[Theta] > \[Pi]/2, \[Theta] -= \[Pi], \[Theta] < -\[Pi]/2, \[Theta] += \[Pi]];

{-\[Theta], -\[Theta]-q5}
];

pivotFoot[m_, x_, c_] := Module[{pos, l, r, \[CurlyPhi]},
\[CurlyPhi] = contactAngles[c[[1]]];
pos= left /. \[DoubleStruckC][i_] :> c[[1, i]];
pos[[2]] += R{Sin[\[CurlyPhi][[1]]], -Cos[\[CurlyPhi][[1]]], 0};
pos
];


(* ::Input::Initialization:: *)
cm[s_, A_] := Module[{q, v, a, n, \[Theta]0T, C},
(* BLc indices *)
n = mm - 1; (* 2D *)
{q, v} = Partition[BLIndices[BLGetBipedBase[], "p", "n" -> {\[DoubleStruckQ], \[DoubleStruckV]}], n];
q = "q" -> {q, Range@Length@q, 2A["np", s]};
v = "v" -> {v, Range@Length@v, A["np", s]};

(* polynomial scaling factors *)
\[Theta]0T = A["\[Theta]", s];

(* function specific parameters *)
a = <|"BLc" -> <|q, v|>, "BLc0T" -> <|"\[Theta]" -> \[Theta]0T|>, "BLSummary" -> <|"P" -> First@regopt[Last@stsw[s]]|>|>;

(* create parameters *)
C = BLContinuationParameters[Association -> a,  "\[Mu]" -> n\[Mu]];

<|s -> C|>
];

viz[] := Module[{r},
r = {4, 5, 6};

BLDontDraw[{
"left leg",  "left foot", "right foot"
}];

BLRadius[0.09];
BLWidth[0.06];

<|
"axes" -> {1, 2},

"scale" -> L,

"poi" -> <|
"left limb" -> \[DoubleStruckB]["left leg", r, limb], "right limb" -> \[DoubleStruckB]["right leg", r, limb], 
"left foot" -> \[DoubleStruckB]["left leg", r, (*lfoot*)center], "right foot" -> \[DoubleStruckB]["right leg", r, (*rfoot*)center]
|>,

"lc" -> <|"right limb" -> LightGray, "right foot" -> LightGray|>,
"jc" -> <|"left foot" -> Gray, "right foot" -> LightGray|>,

"f" -> curvedfoot,

"surface" -> pivotFoot
|>
];

CreateModel[] := Module[{com, c, I, o},
RBDNewModel[];
RBDLink["\[Theta]", Root, "m" -> 1, "S"-> "pz"];
com = {0, -Lcom, 0};
I = {0, 0, m rGyr^2};
o = Sequence@@{"m" -> m, "I" -> I, "com" -> com};
RBDLink["left leg", Root, o, "S"-> "pln"];
RBDLink["right leg", "left leg", o, "S"-> "rz"];
RBDCreateModel["g" -> g];
];


(* ::Input::Initialization:: *)
CurvedFeetMeshOptions[] := Module[{m, w},
w = 0.4 R;
w = <|"mesh" -> <|"joint" -> <|"height" -> 1.1 w, "radius" -> w/2|>,"link" -> <|"width" -> w|>|>|>;

m = <|"dof" -> "poi-circ", "mesh" -> <|"joint" -> <|"radius" -> R|>|>|>;
<|"left foot" -> m, "right foot" -> m, "left leg-rz" -> w, "right leg-rz" -> w|>
]


(* ::Input::Initialization:: *)
line[c1_, c2_, r1_, r2_, k_:1] := Module[{dr, dc, d, a, b, c},
dc = c2 - c1;
dr = r2 - r1;
d = Norm[dc];

dc = dc/d;
dr = dr/d;

a = dr dc[[1]]-k dc[[2]] Sqrt[1-dr^2];
b = dr dc[[2]]+k dc[[1]] Sqrt[1-dr^2];
c = r1 - (a c1[[1]] + b c1[[2]]);

(* a x + b y + c = 0 *)
d = If[PossibleZeroQ[b], {-c/a, #}&, {#, -a/b # -c/b}&];
(*InfiniteLine[{d[2], d[1]}]*)
{d[2], d[1]}
];

Options[CurvedFeetSurface] = {"m" :> BLbiped["m[0]"], "k" -> 1};
CurvedFeetSurface[\[CurlyPhi]_, d_, OptionsPattern[]] := Module[{\[Rho], x, c, pos, l, r, g},
\[Rho] = R/L;
c = If[AssociationQ[\[CurlyPhi]],  \[CurlyPhi]["c[t]"][0], \[CurlyPhi]];
x = c[[1;;nx]];
pos = First@BipedalLocomotion`Private`LinkPositions[x, c];
{l, r} = pos /@ {"left foot", "right foot"};

g = line[l, r, \[Rho], \[Rho], OptionValue["k"]];

Flatten@{BipedalLocomotion`Private`fc, InfiniteLine[g[[1]], {1, 0}], BipedalLocomotion`Private`sc, InfiniteLine[g], Red, PointSize[Large], Point[g]}
];

curvedfoot[x_, c_] := Module[{pos, l ,r, \[Theta], d, \[Rho], rot, A, points},
d = {0, -180}Degree;
\[Rho] = R/L; (* scaled radius *)

pos = First@BipedalLocomotion`Private`LinkPositions[x, c];
{l, r} = pos /@ {"left foot", "right foot"};

rot = RotationMatrix[x[[4]]];
A = AffineTransform[{rot, l}];
l = GeometricTransformation[Disk[{0, 0}, \[Rho], d], A];

rot = RotationMatrix[x[[4]]+x[[5]]];
A = AffineTransform[{rot, r}];
r = GeometricTransformation[Disk[{0, 0}, \[Rho], d], A];

{EdgeForm[{Thick, Black}], Gray, l, LightGray, r(*, Sequence@@points*), Red, PointSize[Large], Point[{pos["left foot"], pos["right foot"]}]}
];


(* ::Input::Initialization:: *)
CurvedFeetP[cp_, opts:OptionsPattern[]] := CurvedFeetP[BLbiped["m[0]"], cp, opts]["R"];

CurvedFeetP[m_String, cp_, opts:OptionsPattern[]] := Module[{M, R, C, S, c},
M = BLP[m, cp, opts];
c = M["c"][[1]];

(* \[DoubleStruckC][-3] => w(\[DoubleStruckC][-3]) && \[DoubleStruckC][-2] = \[Sigma] = q4+q5/2 *)
C = c[[All, -3;;-3]];
S = c[[All, 4;;4]]+c[[All, 5;;5]]/2-c[[All, -2;;-2]];

R = M["R"];
M["R"] = MapThread[Join, {R, C, S}];

M
];


(* ::Input::Initialization:: *)
CurvedFeet[n_:0] := Module[{A, C, X, J, l, r, draw, L, R},
CreateModel[];

(* coordinate flip *)
BLA[];
A = IdentityMatrix[nq];
A[[4, 5]] = 1;
A[[5, 5]] = -1;
A = ArrayFlatten[{{A, 0}, {0, A}}];

(* create dynamic regimes *)
L = BLRegime["left", regopt["left"]];
R = BLRegime["right", regopt["right"]];
C = Join[L, R];

(* create jumps given state of biped at transition at t- (pre-impact) *)
L = BLxT["left", "ST" -> rLimb(*right*), "SW" -> lLimb(*left*), "A" -> A];
R = BLxT["right", "ST" -> lLimb(*left*), "SW" -> rLimb(*right*), "A" -> A];
X = Join[L, R];

J = Join[<|"A" -> A|>];
A = BLCreateBiped["Curved Feet", C, X, viz[], (*feet*)limbs, J];
C = Join[cm["left", A], cm["right", A]];
BLCreateContinuationParameters["right", C];

fixcons[];

BLCompileBiped[n]
];


(* ::Input::Initialization:: *)
End[]
EndPackage[]
