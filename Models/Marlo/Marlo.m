(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["BipedalLocomotion`Marlo`", {"GlobalVariables`", "RigidBodyDynamics`", "BipedalLocomotion`", "BipedalLocomotion`Model`"}]

Marlo::usage = "";
MarloP::usage = "";
MarloE::usage = "";
MarloMeshOptions::usage = "";
MarloPalette::usage = "";

Begin["`Private`"]


(* ::Input::Initialization:: *)
g = {0, 0, 9.81};
n\[Mu] = 4;

bar4 = {\[DoubleStruckQ]["left_thigh", 1]+\[DoubleStruckQ]["left_lower_leg", 1]- \[DoubleStruckQ]["left_shin", 1], \[DoubleStruckQ]["left_shin", 1]+\[DoubleStruckQ]["left_four_bar_link", 1]- \[DoubleStruckQ]["left_thigh", 1], \[DoubleStruckQ]["right_thigh", 1]+\[DoubleStruckQ]["right_lower_leg", 1]- \[DoubleStruckQ]["right_shin", 1], \[DoubleStruckQ]["right_shin", 1]+\[DoubleStruckQ]["right_four_bar_link", 1]- \[DoubleStruckQ]["right_thigh", 1]};

(* constrained variables *)
(*X = {\[DoubleStruckQ]["torso", 1], \[DoubleStruckQ]["torso", 2], \[DoubleStruckQ]["torso", 3], \[DoubleStruckQ]["left_lower_leg", 1], \[DoubleStruckQ]["left_four_bar_link", 1], \[DoubleStruckQ]["right_lower_leg", 1], \[DoubleStruckQ]["right_four_bar_link", 1]};*)

X = Alternatives@@{"left_lower_leg","left_four_bar_link","right_lower_leg","right_four_bar_link"};

RED = RGBColor[{252, 18, 0}/255];
YELLOW = RGBColor[{255,253,72}/255];
ORANGE = RGBColor[{253,180,72}/255];
BLACK = RGBColor[{72,72,72}/255];
GRAY = RGBColor[{170, 170, 170}/255];


(* ::Input::Initialization:: *)
(*ucon[s_] := DiagonalMatrix@BLSide[s, {{1, 1, 1, 1, 0, 1}, {1, 1, 0, 1, 1, 1}}, 1];*)

ucon[s_] := DiagonalMatrix@BLSide[s, {{1, 1, 1, 1, 0, 0}, {1, 1, 0, 0, 1, 1}}, 1];

qrm[s_] := Module[{t, w},
(* remove following configurations *)
{{X, ""}(*, {"hip", "ry"}*)}
];

vrm[s_] := Module[{t, w},
(* remove following velocities *)
{{X, ""}(*, {"hip", "ry"}*)}
];


(* ::Input::Initialization:: *)
qvInd[s_] := Module[{n, qx, vx, q, v},
n = mm;
{qx, vx} = Partition[BLIndices[BLGetBipedBase[], "p", "n" -> {\[DoubleStruckQ], \[DoubleStruckV]}], n];
{q, v} = Partition[BLIndices[X, "", "n" -> {\[DoubleStruckQ], \[DoubleStruckV]}], Length@X];

q = Join[q, qx];
v = Join[v, vx];

(* indices for BLc in P.nb *)

(* q indices are for \[Eta]p, which returns (h, hdot) *)
q = {q[[-3;;-1]], Range[Length@q][[-3;;-1]]};

(* v indices are for J[p], which returns Inverse[J[q\[LeftDoubleBracket]2\[RightDoubleBracket], q\[LeftDoubleBracket]1\[RightDoubleBracket]]].hdot[q\[LeftDoubleBracket]2\[RightDoubleBracket]] *)
v = {v[[-3;;-1]], Range[Length@v[[-3;;-1]]]};

(*q = {q\[LeftDoubleBracket]-3;;-1\[RightDoubleBracket], Range[Length@q\[LeftDoubleBracket]-3;;-1\[RightDoubleBracket]]};
v = {v\[LeftDoubleBracket]-3;;-1\[RightDoubleBracket], Range[Length@v\[LeftDoubleBracket]-3;;-1\[RightDoubleBracket]]};*)

{q, v}
];

Jind[s_] := qvInd[s][[1]]; 
(* \[LeftDoubleBracket]1\[RightDoubleBracket] b/c velocity indices start at 1 *)



(* ::Input::Initialization:: *)
regopt[s_] := Module[{S, P, V, B(*, J*), t, w},
S = BLSide[s, feet];
P = <|-1 -> bar4, 0 -> BLFeet[First@S, {4, 5, 6}][1]|>;
(*V = <|3 \[Rule] {{("hip"|"thigh"|"lower_leg")}}|>;*)

{t, w} = BLSide[s];

V = <|3 -> {{("hip"|t <>"_thigh"|t<>"_lower_leg")}}, 4 -> {{(w <> "_thigh"|w <> "_lower_leg")}}|>;

(*V = <|0 \[Rule] {{("hip")}}, 7 \[Rule] {{("thigh"|"lower_leg")}}|>;*)
(*V = <|3 \[Rule] {{("hip")}}, 3 \[Rule] {{("thigh"|"lower_leg")}}|>;*)
B = BLValues["hip"|"thigh"|"shin", "", "n" -> \[DoubleStruckV]];

(*J = Join[BLIndices[X], BLIndices[BLGetBipedBase[], "p"]];*)

{"P" -> P, "V" -> V, "S" -> S, "B" -> B(*, "Pcon" \[Rule] ucon[s]*), "n\[Mu]" -> n\[Mu], "J[p]" ->  Jind[s]}
];


(* ::Input::Initialization:: *)
cp[c_] := Module[{cc, v},
v = bar4;
v = Join[v, v /. \[DoubleStruckQ] -> \[DoubleStruckV]];
v = v /. {x_\[DoubleStruckQ] :> \[DoubleStruckC][RBDGetIndex[x]], x_\[DoubleStruckV] :> \[DoubleStruckC][RBDGetIndex[x]]};

cc = RBDGetIndex@BLValues["four"|"lower", "", "n" -> {\[DoubleStruckQ], \[DoubleStruckV]}];
cc = \[DoubleStruckC] /@ cc;

v = Flatten[Solve[Thread[v == 0], cc]];
v = v /. HoldPattern[\[DoubleStruckC][i_] -> x__] :> (i -> x);
v = v /. \[DoubleStruckC][i_] :> c[[i]];

ReplacePart[c, v]
];

cm[s_, A_] := Module[{q, v, qx, vx, C, a(*, n*), \[Theta]0T},
(*n = mm;
{qx, vx} = Partition[BLIndices[BLGetBipedBase[], "p", "n" \[Rule] {\[DoubleStruckQ], \[DoubleStruckV]}], n];
{q, v} = Partition[BLIndices[X, "", "n" \[Rule] {\[DoubleStruckQ], \[DoubleStruckV]}], Length@X];

q = Join[q, qx];
v = Join[v, vx];

q = "q" \[Rule] {q\[LeftDoubleBracket]-3;;-1\[RightDoubleBracket], Range[Length@q]\[LeftDoubleBracket]-3;;-1\[RightDoubleBracket], 2A["np", s]};
v = "v" \[Rule] {v\[LeftDoubleBracket]-3;;-1\[RightDoubleBracket], Range[Length@v]\[LeftDoubleBracket]-3;;-1\[RightDoubleBracket], A["np", s]};*)

{q, v} = qvInd[s];
q = "q" -> Append[q, 2A["np", s]];
v = "v" -> Append[v, Length[v[[2]]]]; (* Length[v\[LeftDoubleBracket]1\[RightDoubleBracket]] === Length[v\[LeftDoubleBracket]2\[RightDoubleBracket]] *)

(* polynomial scaling factors *)
\[Theta]0T = A["\[Theta]", s];

(* function specific parameters *)
a = <|"BLc" -> <|q, v|>, "BLc0T" -> <|"\[Theta]" -> \[Theta]0T|>, "BLSummary" -> <|regopt[BLSide[s, Automatic, -1]]|>|>;

(* create parameters *)
C = BLContinuationParameters["q" -> qrm[s], "v" -> vrm[s], "\[Alpha]" -> A["\[Alpha]", s, "\[Alpha]f"], "c[p]" -> cp, "\[Mu]" -> n\[Mu], Association -> a];

<|s -> C|>
];

MarloPalette["STL"] := Module[{lc, p},
lc = <||>;
p = #[[1]] <> "-poi" -> \[DoubleStruckB][#[[1]], {4, 5, 6}, #[[2]]]& /@ poi;

Do[
Which[
StringContainsQ[k, "torso"],  lc[k] = GRAY,
StringContainsQ[k, "hip"], lc[k] = ORANGE,
StringContainsQ[k, "thigh"], lc[k] = BLACK,
StringContainsQ[k, "shin"], lc[k] = YELLOW,
StringContainsQ[k, "four_bar_link"], lc[k] = YELLOW,
StringContainsQ[k, "lower_leg"],  lc[k] = BLACK
],
{k, Join[marlo[[All, 1]], Keys@p]}];

lc
];

MarloPalette["Classic"] := Module[{lc, p},
lc = <||>;
p = #[[1]] <> "-poi" -> \[DoubleStruckB][#[[1]], {4, 5, 6}, #[[2]]]& /@ poi;

Do[
Which[
StringContainsQ[k, "four_bar_link-poi"], lc[k] = Green,
StringContainsQ[k, "right"], lc[k] = LightGray,
True,  lc[k] = Gray
],
{k, Join[marlo[[All, 1]], Keys@p]}];

lc
];

viz[] := Module[{r, p, lc},
r = {4, 5, 6};
p = #[[1]] <> "-poi" -> \[DoubleStruckB][#[[1]], r, #[[2]]]& /@ poi;
lc =MarloPalette["STL"];

BLDontDraw[{"torso"}];
BLRadius[0.09];
BLWidth[0.06];

(* hack, need to rep c *)
<|
"axes" -> {2,3}(*Range[3]*),

(* hack *)
"scale" -> Max[Norm /@ marlo[[All, RBDindex["f[xyz]"]]] /. \[DoubleStruckC][-2]-> 1],

"poi" -> <|p|>,

"lc" -> lc
|>
];

CreateModel[] := Module[{c},
(* robot model *)
{marlo, poi, feet} = CreateModelData[];

(*poi = poi\[LeftDoubleBracket]{1, -3, -1}\[RightDoubleBracket];*)

RBDNewModel[];
RBDLink["\[Theta]", Root, "m" -> 1, "S"-> "py"];
RBDLinks[marlo];

c = StringContainsQ[#, {"thighspring", "shinspring"}]&;
c = Select[marlo[[All, 1]], c];
RBDLink[c, Merge];

(*c = StringContainsQ[#, {"hip"(*, "four", "shin"*)}]&;
c = Select[marlo\[LeftDoubleBracket]All, 1\[RightDoubleBracket], c];
RBDLink[c, Merge];*)

(*marlo = RBDLinks[];*)
(* hack, fix RBDindex so indexing is a list not a range *)

marlo = RBDLinks[];
marlo[[All, RBDindex["f[x]"]]] = \[DoubleStruckC][-2] marlo[[All, RBDindex["f[x]"]]];
marlo[[All, RBDindex["c[x]"]]] = \[DoubleStruckC][-2] marlo[[All, RBDindex["c[x]"]]];
marlo[[All, RBDindex["c[y]"]]] = \[DoubleStruckC][-2] marlo[[All, RBDindex["c[y]"]]];

(*c = 2;
marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket] = ((marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket]-1)\[DoubleStruckC][-2]+1);

c = {3, 4};
marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket] = ((marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket]-1)\[DoubleStruckC][-2]+1);

c = {5, 7};
marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket] = ((marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket]-1)\[DoubleStruckC][-2]+1);

c = {6, 8};
marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket] = ((marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket]-1)\[DoubleStruckC][-2]+1);*)

(*c = {9, 11};
marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket] = ((marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket]-2)\[DoubleStruckC][-2]+2);*)

(*c = {10, 12};
marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket] = ((marlo\[LeftDoubleBracket]c, RBDindex["m"]\[RightDoubleBracket]-2)\[DoubleStruckC][-2]+2);*)

RBDCreateModel["L" -> marlo, "g" -> g, "spat" -> False];
];


(* ::Input::Initialization:: *)
MarloMeshOptions::name = "Invalid body name: ``.";

MarloMeshOptions[] := Module[{red, yellow, orange, black, gray, names, A},
A = BipedalLocomotion`Private`ColorToInteger;
red = A@RED;
yellow = A@YELLOW;
orange = A@ORANGE;
black = A@BLACK;
gray = A@GRAY;

(* should makes this a function in RBD *)
names = StringRiffle[List@@#, "-"]& /@ RBDGetValue[1, nq, "n" -> True];

A = <|#-> <|"mesh" -> <||>|>& /@names[[7;;]]|>;
A[Root] = <|"loader" -> "Marlo/index.js"|>;

Do[
Which[
StringContainsQ[k, "torso"], 
A[k, "mesh"] = <|
"file" -> "torso_no_mount.stl", "link" -> <|"color" -> gray|>|>,

StringContainsQ[k, "hip"], 
A[k, "mesh"] = <|
"file" -> "hip_shaft.stl", 
"link" -> <|"color" -> orange|>|>,

StringContainsQ[k, "thigh"], 
A[k, "mesh"] = <|
"file" -> "thigh.stl", 
"link" -><|"color" -> black|>|>,

StringContainsQ[k, "shin"], 
A[k, "mesh"] = <|
"file"  -> "shin.stl",
"link" -> <|"color" -> yellow|>|>,

StringContainsQ[k, "four_bar_link"], 
A[k, "mesh"] = <|
"file" -> "four_bar_link.stl", 
"link" -> <|"color" -> yellow|>|>,

StringContainsQ[k, "lower_leg"], 
A[k, "mesh"] = <|
"file"  -> "lower_leg.stl", 
"link" -> <|"color" -> black|>|>,

True,
Message[MarloMeshOptions::name, k]
],
{k, names[[7;;]]}];

A
]


(* ::Input::Initialization:: *)
MarloP[cp_, opts:OptionsPattern[]] := MarloP[BLbiped["m[0]"], cp, opts]["R"];

MarloP[m_String, cp_, opts:OptionsPattern[]] := Module[{i, j, n, M, C},
M = BLP[m, cp, opts];
n = Length@BLbiped["c", m, "x"]/2;

(*(* left thigh/left thigh *)
(* makes right thigh q = 0 @ t = 0-, but leaves right thigh v free *)
i = {4};
i = Join[i, i + n];
j = {10};
j = Join[j, j+nq];
(* next pre-impact state *)
M\[LeftDoubleBracket]"R", All, i\[RightDoubleBracket] = M\[LeftDoubleBracket]"x-", -1, All, j\[RightDoubleBracket];

(* left lower leg/left shin *)
i = {5};
i = Join[i, i + n];
j = {14};
j = Join[j, j+nq];
(* first post-impact state *)
M\[LeftDoubleBracket]"R", All, i\[RightDoubleBracket] = M\[LeftDoubleBracket]"x+", 2, All, j\[RightDoubleBracket];

(* right lower leg/right shin *)
i = {7};
i = Join[i, i + n];
j = {16};
j = Join[j, j+nq];
(* initial pre-impact state *)
M\[LeftDoubleBracket]"R", All, i\[RightDoubleBracket] = M\[LeftDoubleBracket]"x-", 1, All, j\[RightDoubleBracket];*)

C = M["c"][[1, All, -(n\[Mu]+1);;-2]];

M["R"] = MapThread[Join, {M["R"], C}];

M
];

MarloE[cp_, opts:OptionsPattern[]] := MarloE[BLbiped["m[0]"], cp, opts]["R"];

MarloE[m_String, cp_, opts:OptionsPattern[]] := Module[{M, i, j, n},
M = MarloP[m, cp, opts];
n = Length@BLbiped["c", m, "x"]/2;

(* hold z constant *)
i = {3};
i = Join[i, i + n];
j = {7};
j = Join[j, j+nq];

M[["R", All, i]] = M[["x-", 1, All, j]];

M
];


(* ::Input::Initialization:: *)
Marlo[n_:0] := Module[{A, c, x, l, r},
(* model *)
CreateModel[];

(* constraints *)
A = BLA[{{\[DoubleStruckQ]["torso", "px"], \[DoubleStruckQ]["torso", "px"]}, {\[DoubleStruckQ]["torso", "ry"], \[DoubleStruckQ]["torso", "ry"]}, {\[DoubleStruckQ]["left_hip", "ry"], \[DoubleStruckQ]["right_hip", "ry"]}}];

l = BLRegime["left", regopt["left"]];
r = BLRegime["right", regopt["right"]];
c = Join[l, r];

(* pre-impact stance/post-impact mode *)
l = BLxT["left", "ST" -> feet[[2]], "SW" -> feet[[1]], "A" -> A];
r = BLxT["right", "ST" -> feet[[1]], "SW" -> feet[[2]], "A" -> A];
x = Join[l, r];

A = BLCreateBiped["Marlo", c, x, viz[], feet, <|"A" -> A|>];

c = Join[cm["left", A], cm["right", A]];
BLCreateContinuationParameters["right", c];

(* don't expand certain constraints *)
c = {_, _, ((\[DoubleStruckB]')|\[DoubleStruckB])[__], __};
c = Flatten@Position[RigidBodyDynamics`Private`con, c];
RigidBodyDynamics`Private`con[[c, -2]] = False;
(*RigidBodyDynamics`Private`con\[LeftDoubleBracket]1;;4, -4;;-3\[RightDoubleBracket] = 0;*)

(*c = {_, "left-p"|"right-p", ((\[DoubleStruckB]')|\[DoubleStruckB])[__], __};
c = Flatten@Position[RigidBodyDynamics`Private`con, c];
RigidBodyDynamics`Private`con\[LeftDoubleBracket]c, -4\[RightDoubleBracket] = 10;
RigidBodyDynamics`Private`con\[LeftDoubleBracket]c, -3\[RightDoubleBracket] = 5;*)
RBDSpatialFunctions[];

BLCompileBiped[n]
];


(* ::Input::Initialization:: *)
End[]
EndPackage[]
