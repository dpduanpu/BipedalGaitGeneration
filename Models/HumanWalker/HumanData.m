(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["BipedalLocomotion`HumanWalker`", {"RigidBodyDynamics`"}]

Begin["`Private`"]


(* ::Input::Initialization:: *)
fil = "HumanWalker/human.xlsx";
T1 = Import[fil,{"Data",1}];
T2 = Import[fil,{"Data",2}];
T1c = Import[fil,{"Data",4}];
T2c = Import[fil,{"Data",5}];


(* ::Input::Initialization:: *)
(* mm to m *)
f = If[NumericQ[#], #/1000, #]&;

T1[[4;;48,  3;;8]] = Map[f, T1[[4;;48,  3;;8]], {2}];
T1c[[3;;6,  3;;8]] = Map[f, T1c[[3;;6,  3;;8]], {2}];

T2[[3;;35, 5]] = f /@ T2[[3;;35, 5]];
T2c[[3;;4, 5]] = f /@ T2c[[3;;4, 5]];

(* i to I *)
f = If[StringQ@# && StringContainsQ[#, "i"], N@ToExpression@ToUpperCase@#, #]&;

T2[[3;;35,  10;;15]] = Map[f, T2[[3;;35,  10;;15]], {2}];
T2c[[3;;4,  10;;15]] = Map[f, T2c[[3;;4,  10;;15]], {2}];

(* % to frac *)
f = If[NumericQ[#], #/100, #]&;

T2[[3;;35,  6;;15]] = Map[f, T2[[3;;35,  6;;15]], {2}];
T2c[[3;;4,  6;;15]] = Map[f, T2c[[3;;4,  6;;15]], {2}];


(* ::Input::Initialization:: *)
(* joint centers *)
JC = <||>;

(* pelvis: ljc to hjc *)
JC["LJC to HJC"] = T1[[33, 3;;5]];

(* pelvis: ljc to cjc *)
JC["LJC to CJC"] = -T1[[12, 3;;5]];

(* torso: cjc to sjc *)
JC["CJC to SJC"] = T1[[11, 3;;5]];

(* arm: sjc to ejc *)
(* midpoint of *)
JC["SJC to EJC"] = Total[T1[[15;;16, 3;;5]]]/2;

(* forearm: ejc to wjc *)
(* midpoint of *)
JC["EJC to WJC"] = Total[T1[[19;;20, 3;;5]]]/2;

(* thigh: hjc to kjc *)
(* midpoint of *)
JC["HJC to KJC"] = Total[T1[[36;;37, 3;;5]]]/2;

(* leg: kjc to ajc *)
(* midpoint of *)
JC["KJC to AJC"] = Total[T1[[41;;42, 3;;5]]]/2;


(* ::Input::Initialization:: *)
(* points of interest *)
POI = <||>;
(* head & neck: cjc to hv *)
POI["CJC to HV"] = T1c[[3, 3;;5]];

(* hand: wjc to ft3 *)
POI["WJC to FT3"] = T1[[26, 3;;5]];

(* pelvis: width *)
(* difference of *)
T1[[30;;31, 3;;5]];

(* torso: thorax width *)
(* difference of *)
T1[[8;;9, 3;;5]];

(* ankle: ajc to tt, cal, & mh *)
POI["AJC to CAL"] = T1[[44, 3;;5]];
POI["AJC to MH1"] = T1[[45, 3;;5]];
POI["AJC to MH5"] = T1[[46, 3;;5]];
POI["AJC to TT2"] = T1[[47, 3;;5]];


(* ::Input::Initialization:: *)
(* segment length *)
SL = <||>;

SL["Head & Neck"] = Norm[POI["CJC to HV"]];

SL["Torso"] = Norm[JC["LJC to CJC"]];

SL["Arm"] = Norm[JC["SJC to EJC"]];

SL["Forearm"] = Norm[JC["EJC to WJC"]];

SL["Hand"] = Norm[Total[T1[[24;;25, 3;;5]]]/2];

SL["Pelvis"] = Norm[IdentityMatrix[{2,3}].JC["LJC to HJC"]];

SL["Thigh"] = Norm[JC["HJC to KJC"]];

SL["Leg"] = Norm[JC["KJC to AJC"]];

SL["Foot"] = Norm[Total[T1[[45;;46, 3;;5]]]/2];

(* torso width (middle of chest to shoulder) *)
SL["Torso - Alt."] = Norm[T1[[8, 3;;5]]-T1[[9, 3;;5]]];

(* hand width (glove size) *)
SL["Hand - Alt."] = Norm[POI["WJC to FT3"]];

(* pelvis width *)
SL["Pelvis - Alt."] = Norm[T1[[30, 3;;5]]-T1[[31, 3;;5]]];

(* foot width (shoe size) *)
SL["Foot - Alt."] = Norm[POI["AJC to CAL"]-POI["AJC to TT2"]];


(* ::Input::Initialization:: *)
mcI[mtot_, Lseg_, dat_] := Module[{m, c, r, I},
(* body segment mass *)
m = dat[[1]] mtot;
(* body segment COM *)
c = dat[[2;;4]] Lseg;
(* body segment % I *)
r = dat[[5;;10]];
(* I about JC *)
I = m ({r[[{1, 4, 5}]], r[[{4, 2, 6}]], r[[{5, 6, 3}]]} Lseg)^2;
(* I about COM *)
(*I = I + m (c.c IdentityMatrix[3] - Outer[Times, c, c]);*)
Chop@{m, c, I}
];


(* ::Input::Initialization:: *)
(* body segment inertia parameters *)
mtot = 63.9 ;(* kg *)

BSIP = <||>;

BSIP["Head & Neck"] = mcI[mtot, SL["Head & Neck"], T2c[[3, 6;;15]]];

BSIP["Torso"] = mcI[mtot, SL["Torso"], T2[[5, 6;;15]]];

BSIP["Arm"] = mcI[mtot, SL["Arm"], T2[[7, 6;;15]]];

BSIP["Forearm"] = mcI[mtot, SL["Forearm"], T2[[9, 6;;15]]];

BSIP["Hand"] = mcI[mtot, SL["Hand"], T2[[11, 6;;15]]];

BSIP["Pelvis"] = mcI[mtot, SL["Pelvis"], T2[[13, 6;;15]]];

BSIP["Thigh"] = mcI[mtot, SL["Thigh"], T2[[15, 6;;15]]];

BSIP["Leg"] = mcI[mtot, SL["Leg"], T2[[17, 6;;15]]];

BSIP["Foot"] = mcI[mtot, SL["Foot"], T2[[19, 6;;15]]];


(* ::Input::Initialization:: *)
Link[n_, p_, S_, f_] := Module[{a, b, c, R},
a = {n, p, S};

b = PadLeft[If[StringQ[f], JC[f], f], nm];

c = BSIP[StringSplit[n, "Right "|"Left "][[-1]]];
c[[2]] = PadLeft[c[[2]], nm];

(* flip z-axis of frame and COM *)
If[StringContainsQ[n, "Left"], 
b[[6]] = -b[[6]];
c[[2, 6]] = -c[[2, 6]];

(* rotate about z b/c product of inertias change sign w.r.t z coord*)
R = RotationMatrix[\[Pi], {0, 0, 1}];
c[[3]] = R.c[[3]].R\[Transpose]
];

c[[3]] = DiagonalMatrix[{0, 0, 1}Diagonal[ c[[3]]]];

Flatten@{a, b, c}
];


(* ::Input::Initialization:: *)
WM = <||>;
WM["Pelvis"] = Link["Pelvis", Root, "pln", z3];

WM["Torso"] = Link["Torso", "Pelvis", "rz", "LJC to CJC"];

WM["Left Thigh"] = Link["Left Thigh", "Pelvis", "rz", "LJC to HJC"];
WM["Right Thigh"] = Link["Right Thigh", "Pelvis", "rz", "LJC to HJC"];

WM["Left Leg"] = Link["Left Leg", "Left Thigh", "rz", "HJC to KJC"];
WM["Right Leg"] = Link["Right Leg", "Right Thigh", "rz", "HJC to KJC"];

WM["Left Foot"] = Link["Left Foot", "Left Leg", "rz", "KJC to AJC"];
WM["Right Foot"] = Link["Right Foot", "Right Leg", "rz", "KJC to AJC"];

WM["Head & Neck"] = Link["Head & Neck", "Torso", "rz", z3];

WM["Left Arm"] = Link["Left Arm", "Torso", "rz", "CJC to SJC"];
WM["Right Arm"] = Link["Right Arm", "Torso", "rz", "CJC to SJC"];

WM["Left Forearm"] = Link["Left Forearm", "Left Arm", "rz", "SJC to EJC"];
WM["Right Forearm"] = Link["Right Forearm", "Right Arm", "rz", "SJC to EJC"];

WM["Left Hand"] = Link["Left Hand", "Left Forearm", "rz", "SJC to EJC"];
WM["Right Hand"] = Link["Right Hand", "Right Forearm", "rz", "SJC to EJC"];


(* ::Input::Initialization:: *)
WM[[All, RBDindex["f[x]"]]] = 0;
WM[[All, RBDindex["c[x]"]]] = 0;

WM[[All, RBDindex["f[z]"]]] = 0;
WM[[All, RBDindex["c[z]"]]] = 0;

POI[[All, 1]] = 0;
POI[[All, 3]] = 0;

(*feet = {{"Left Foot", "Right Foot"}, {z3, z3}}\[Transpose];*)

feet = {{"Left Leg", "Right Leg"}, ConstantArray[JC["KJC to AJC"], 2]}\[Transpose];
KeyDropFrom[WM, {"Left Foot", "Right Foot"}];


(* ::Input::Initialization:: *)
End[]
EndPackage[]
